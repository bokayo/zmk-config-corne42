/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NUM 1
#define SYM 2
#define FUNC 3
#define NAV 4
#define MOU 5
#define MISC 6

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        cmb_undo {
            bindings = <&kp K_UNDO>;
            key-positions = <25 26>;
            layers = <7>;
        };

        cmb_redo {
            bindings = <&kp K_REDO>;
            key-positions = <26 27>;
            layers = <7>;
        };

        cmb_copy {
            bindings = <&kp K_COPY>;
            key-positions = <27 28>;
            layers = <7>;
        };

        cmb_paste {
            bindings = <&kp K_PASTE>;
            key-positions = <28 29>;
            layers = <7>;
        };

        cmb_save {
            bindings = <&kp C_AC_SAVE>;
            key-positions = <13 14>;
            layers = <7>;
        };

        cmb_f6 {
            bindings = <&kp F6>;
            key-positions = <3 2>;
            layers = <7>;
        };

        cmb_tgl_num_pad {
            bindings = <&tog 8>;
            key-positions = <38 36>;
            layers = <7 8>;
        };

        cmb_tgl_fusion {
            bindings = <&tog 7>;
            key-positions = <38 24>;
            layers = <7 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default Layer";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp LS(LA(LC(LEFT_GUI)))  &kp W           &kp E               &kp R             &kp T        &kp Y        &kp U              &kp I                &kp O            &kp RS(RA(RC(RIGHT_GUI)))  &none
&kp Q  &mt LEFT_GUI A            &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMICOLON    &kp P
&none  &kp Z                     &kp X           &kp C               &kp V             &kp B        &kp N        &kp M              &kp COMMA            &kp DOT          &kp FSLH                   &none
                                                 &lt 5 DELETE        &lt 3 ESCAPE      &lt 4 TAB    &lt 6 ENTER  &lt 1 SPACE        &lt 2 BACKSPACE
            >;
        };

        num_layer {
            bindings = <
&trans    &trans     &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans     &trans     &trans    &trans    &trans
&kp LBKT  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans    &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans     &trans     &trans    &trans    &trans
                             &kp DOT  &kp N0  &kp MINUS    &trans  &trans     &trans
            >;
        };

        func_layer {
            bindings = <
&trans   &trans   &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &trans    &trans
&kp F12  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans   &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &trans  &trans     &trans     &trans    &trans    &trans
                          &trans  &trans  &trans             &trans  &trans     &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp K_REDO      &kp K_PASTE     &kp K_COPY    &kp K_CUT        &trans        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp CAPSLOCK  &kp K_UNDO
&trans  &trans    &trans    &trans     &trans     &trans    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &kp INSERT    &trans
                            &trans     &trans     &trans    &trans          &trans          &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans          &kp K_MUTE      &kp C_VOL_DN  &kp C_VOLUME_UP  &trans      &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp K_PREV  &kp K_NEXT
&trans  &trans    &trans    &trans     &trans     &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans      &trans
                            &trans     &trans     &trans    &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;
        };

        misc_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_PRV      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_NXT      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 4  &bt BT_CLR        &bt BT_CLR_ALL  &trans  &trans  &trans
                        &trans  &trans  &trans    &kp C_STOP    &kp C_PLAY_PAUSE  &trans
            >;
        };

        sym_layer {
            bindings = <
&trans        &trans         &kp RS(N7)  &kp RS(N8)   &kp RS(N9)  &kp RS(RBKT)     &trans  &trans     &trans     &trans    &trans    &trans
&kp RS(LBKT)  &kp RS(SQT)    &kp RS(N4)  &kp RS(N5)   &kp RS(N6)  &kp RS(EQUAL)    &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans        &kp RS(GRAVE)  &kp RS(N1)  &kp RS(N2)   &kp RS(N3)  &kp RS(BSLH)     &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp RS(DOT)  &kp RS(N0)  &kp RS(MINUS)    &trans  &trans     &trans
            >;
        };

        fusion360 {
            display-name = "fusion360";
            bindings = <
&trans  &trans          &kp W           &kp E                   &kp R                  &kp T        &trans  &trans  &trans  &trans  &trans  &trans
&kp Q   &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D      &mt LEFT_SHIFT F       &kp G        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z           &kp X           &kp C                   &kp V                  &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                                        &mt LEFT_GUI BACKSPACE  &mt LEFT_SHIFT ESCAPE  &lt 9 TAB    &trans  &trans  &trans
            >;
        };

        numeric_keypad {
            bindings = <
&trans  &trans        &kp N7  &kp N8   &kp N9  &kp BSPC     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp ASTERISK  &kp N4  &kp N5   &kp N6  &kp MINUS    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp FSLH      &kp N1  &kp N2   &kp N3  &kp PLUS     &trans  &trans  &trans  &trans  &trans  &trans
                              &kp DOT  &kp N0  &kp ENTER    &trans  &trans  &trans
            >;
        };

        fusion_right {
            display-name = "fusion360_right";
            bindings = <
&trans  &trans             &kp O           &kp I                   &kp U                  &kp Y     &trans  &trans  &trans  &trans  &trans  &trans
&kp P   &mt LEFT_GUI SEMI  &mt LEFT_ALT L  &mt LEFT_CONTROL K      &mt LEFT_SHIFT J       &kp H     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp FSLH           &kp DOT         &kp COMMA               &kp M                  &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                           &mt LEFT_GUI BACKSPACE  &mt LEFT_SHIFT ESCAPE  &trans    &trans  &trans  &trans
            >;
        };
    };
};
